/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bot;

import java.util.Optional;
import java.util.Random;
import java.util.Vector;

import org.jsoup.nodes.Element;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.UpdatesListener;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.request.SendMessage;
import com.pengrad.telegrambot.response.SendResponse;

// import com.openhtmltopdf.pdfboxout.PdfRendererBuilder;

import bot.LKParser;
import bot.User;

public class App {
    private static String key = "5803293395:AAFPAXk98c3yzWWpKEuFYP2lE4G8l1MHNjE";
    private static Vector<User> users = new Vector<>();
    private static Vector<Long> whantTickTackToe = new Vector<>();

    public static void main(String[] args) {
        System.out.println("Connecting bot...");
        TelegramBot bot = new TelegramBot(App.key);

        System.out.println("Starting...");
        bot.setUpdatesListener(updates -> {
            for (Update update : updates) {
                System.out.println("Recived: " + update.message().from().firstName());
                String executeMessage = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã..., –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help";
                String[] attempt = update.message().text().split(" ");
                long chatId = update.message().chat().id();

                
                switch (attempt[0].toUpperCase()) {
                    case "/LOGIN": {
                        if (!(User.getUserByChatId(chatId, users) == null)) {
                            executeMessage = "–í—ã —É–∂–µ –≤–æ—à–ª–∏!";
                            break;
                        }

                        if (attempt.length != 3) {
                            executeMessage = "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: /login login password";
                            break;
                        }

                        executeMessage = "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...";
                        SendResponse message = bot.execute(new SendMessage(chatId, executeMessage));

                        if (!LKParser.loginIn(attempt[1], attempt[2])) {
                            executeMessage = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...";
                            break;
                        }

                        users.add(new User(attempt[1], attempt[2], chatId));

                        executeMessage = "–£—Å–ø–µ—à–Ω–æ!";
                        break;
                    } 

                    case "/START": {
                        executeMessage =  "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç üëã!\n"
                                        + "–Ø - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –º–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –õ–ö –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.\n"
                                        + "–ß—Ç–æ –Ø –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å?\n"
                                        + "1. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                                        + "2. –í—Å–µ —Ç–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è\n"
                                        + "3. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –õ–ö\n"
                                        + "\n"
                                        + "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /login \"–ª–æ–≥–∏–Ω\" \"–ø–∞—Ä–æ–ª—å\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
                                        + "\n"
                                        + "–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                        + "1. /tic_tac: –ò–≥—Ä–∞ –≤ –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞ —Å —Å—É–ª—á–∞–π–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º\n"
                                        + "2. /m \"–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\": –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –õ–ö\n"
                                        + "3. /timetable: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                                        + "4. /task \"–∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞\": –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏\n";
                        break;
                    }
                    
                    case "/HELP": {
                        executeMessage =  "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç üëã!\n"
                                        + "–Ø - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –º–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –õ–ö –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.\n"
                                        + "–ß—Ç–æ –Ø –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å?\n"
                                        + "1. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                                        + "2. –í—Å–µ —Ç–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è\n"
                                        + "3. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –õ–ö\n"
                                        + "\n"
                                        + "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /login \"–ª–æ–≥–∏–Ω\" \"–ø–∞—Ä–æ–ª—å\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
                                        + "\n"
                                        + "–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                        + "1. /tic_tac: –ò–≥—Ä–∞ –≤ –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞ —Å —Å—É–ª—á–∞–π–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º\n"
                                        + "2. /m \"–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\": –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –õ–ö\n"
                                        + "3. /timetable: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                                        + "4. /task \"–∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞\": –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏\n";
                        break;
                    }

                    case "/TIC_TAC": {
                        if (whantTickTackToe.size() < 2) {
                            executeMessage = "–ñ–¥—ë–º –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞!";
                            if (!whantTickTackToe.contains(chatId)) {
                                whantTickTackToe.add(chatId);
                            }
                            break;
                        }
                        int player_1 = new Random().ints(0, 3)
                                                    .findFirst()
                                                    .getAsInt();
                        int player_2 = new Random().ints(0, 3)
                                                    .findFirst()
                                                    .getAsInt();
                        Long opponentId = whantTickTackToe.get(
                            new Random().ints(0, whantTickTackToe.size())
                                        .findFirst()
                                        .getAsInt()
                        );

                        if (player_1 > player_2) {
                            bot.execute(new SendMessage(chatId, "–í—ã –≤—ã–π–≥—Ä–∞–ª–∏!"));
                            bot.execute(new SendMessage(opponentId, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"));
                        } else if (player_1 < player_2) {
                            bot.execute(new SendMessage(opponentId, "–í—ã –≤—ã–π–≥—Ä–∞–ª–∏!"));
                            bot.execute(new SendMessage(chatId, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"));
                        } else {
                            bot.execute(new SendMessage(chatId, "–ù–∏—á—å—è!"));
                            bot.execute(new SendMessage(opponentId, "–ù–∏—á—å—è!"));
                        }
                        
                        executeMessage = "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑: /tic_tac";
                        break;
                    }

                    case "/LOGOUT": {
                        if (User.getUserByChatId(chatId, users) == null) {
                            executeMessage = "–í—ã –µ—â—ë –Ω–µ –≤–æ—à–ª–∏!";
                            break;
                        }

                        users.removeIf(n -> (n.getTelegramChatID() == chatId));
                        executeMessage = "–°–¥–µ–ª–∞–Ω–æ!";
                        break;
                    }

                    case "/TIMETABLE": {
                        User user = User.getUserByChatId(chatId, users);
                        
                        if (user == null) {
                            executeMessage = "–í—ã –µ—â—ë –Ω–µ –≤–æ—à–ª–∏!";
                            break;
                        }

                        Optional<Element> timetable = LKParser.getTimetable(user.getLogin(), user.getPassword());

                        if (timetable.isEmpty()) {
                            executeMessage = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –í–æ–∑–º–æ–∂–Ω–æ –õ–ö –Ω–µ —Ä–∞–±–æ—Ç–µ—Ç";
                            break;
                        }

                        //TODO: This part of code is not working? What is happening with gradle?
                        /*
                        try (OutputStream os = new FileOutputStream("/Users/me/Documents/pdf/out.pdf")) {
                            PdfRendererBuilder builder = new PdfRendererBuilder();
                            builder.useFastMode();
                            builder.withUri("file:///Users/me/Documents/pdf/in.htm");
                            builder.toStream(os);
                            builder.run();
                        }
                        */

                        executeMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞! PdfRendereBuild –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!";
                        break;
                    }

                    case "/M": {
                        User user = User.getUserByChatId(chatId, users);
                        
                        if (user == null) {
                            executeMessage = "–í—ã –µ—â—ë –Ω–µ –≤–æ—à–ª–∏!";
                            break;
                        }

                        executeMessage = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –º—ã –µ—â—ë –Ω–µ —É—Å–ø–µ–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å üòñ";
                        break;
                    }
                }

                SendResponse response = bot.execute(new SendMessage(chatId, executeMessage));
            }
            return UpdatesListener.CONFIRMED_UPDATES_ALL;
        });
    }
}
